#define HISTOGRAM_BINS 256 // Histogram.m_NumBins
#define RGBHISTOGRAM_BINS 256 * 3// Histogram.m_NumBins
#define GROUP_SIZE_X 16 // Histogram.m_ThreadGroupSizeX
#define GROUP_SIZE_Y 16 // Histogram.m_ThreadGroupSizeY

#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

RWStructuredBuffer<uint> _HistogramBuffer;
Texture2D<float4> _Source;

CBUFFER_START(Params)
    float4 _Params; // x: width, y: height, z: linear, w: channel
CBUFFER_END

groupshared uint gs_histogram[HISTOGRAM_BINS];
groupshared uint gs_RGBhistogram[HISTOGRAM_BINS * 3];

#pragma kernel HistogramGather
[numthreads(GROUP_SIZE_X, GROUP_SIZE_Y, 1)]
void HistogramGather(uint2 dispatchThreadId : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID)
{
    const uint localThreadId = groupThreadId.y * GROUP_SIZE_X + groupThreadId.x;
    bool isRGB = uint(_Params.w) > 3;
    // Clears the shared memory
    if(isRGB)
    {
        if (localThreadId < HISTOGRAM_BINS)
            gs_RGBhistogram[localThreadId] = 0u;
            gs_RGBhistogram[localThreadId + 256] = 0u;
            gs_RGBhistogram[localThreadId + 256 * 2] = 0u;

    }
    else
    {
        if (localThreadId < HISTOGRAM_BINS)
            gs_histogram[localThreadId] = 0u;
    }

    GroupMemoryBarrierWithGroupSync();

    // Gather local group histogram
    if (dispatchThreadId.x < uint(_Params.x) && dispatchThreadId.y < uint(_Params.y))
    {
        float3 color = saturate(_Source[dispatchThreadId].xyz);

        // We want a gamma-corrected histogram (like Photoshop & all)
        if (_Params.z > 0)
            color = LinearToSRGB(color);
        if(isRGB)
        {
            float channelR = color.r;
            float channelG = color.g;
            float channelB = color.b;

            uint idxR = (uint)(round(channelR * 255.0));
            uint idxG = (uint)(round(channelG * 255.0) + 256);
            uint idxB = (uint)(round(channelB * 255.0) + + 256 * 2);

            InterlockedAdd(gs_RGBhistogram[idxR], 1u);
            InterlockedAdd(gs_RGBhistogram[idxG], 1u);
            InterlockedAdd(gs_RGBhistogram[idxB], 1u);
        }
        else
        {
            // Convert channel value to histogram bin
            float channel;
            uint c = uint(_Params.w);

            if (c > 2) channel = Luminance(color);
            else channel = color[c];

            uint idx = (uint)(round(channel * 255.0));

            InterlockedAdd(gs_histogram[idx], 1u);
        }
    }

    GroupMemoryBarrierWithGroupSync();

    // Merge everything
    if(isRGB)
    {
        if (localThreadId < RGBHISTOGRAM_BINS)
        {
            InterlockedAdd(_HistogramBuffer[localThreadId], gs_RGBhistogram[localThreadId]);
            InterlockedAdd(_HistogramBuffer[localThreadId + 256], gs_RGBhistogram[localThreadId + 256]);
            InterlockedAdd(_HistogramBuffer[localThreadId + 256 * 2], gs_RGBhistogram[localThreadId + 256 * 2]);
        }
    }
    else
    {
        if (localThreadId < HISTOGRAM_BINS)
            InterlockedAdd(_HistogramBuffer[localThreadId], gs_histogram[localThreadId]);
    }
}

#pragma kernel HistogramClear
[numthreads(GROUP_SIZE_X, 1, 1)]
void HistogramClear(uint dispatchThreadId : SV_DispatchThreadID)
{
    if(uint(_Params.w) > 3)
    {
        if (dispatchThreadId < RGBHISTOGRAM_BINS)
            _HistogramBuffer[dispatchThreadId] = 0u;
    }
    else
    {
        if (dispatchThreadId < HISTOGRAM_BINS)
            _HistogramBuffer[dispatchThreadId] = 0u;
    }
}
